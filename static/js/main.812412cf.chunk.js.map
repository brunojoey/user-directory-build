{"version":3,"sources":["components/Wrapper/index.js","components/Row/index.js","components/Column/index.js","components/Table/index.js","components/Button/index.js","components/JumboTron/index.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","fluid","Row","Col","size","split","map","join","CreateTable","scope","employees","filteredEmployees","filterPosBy","filter","employee","occupation","sort","first","second","orderBy","key","id","name","salary","employeeList","SortButtons","onClick","handleButtonClick","action","actionBy","text","Jumbotron","Home","useState","setOrderBy","setFilterPosBy","handleButton","index","indexOf","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.812412cf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className={`container${props.fluid ? '-fluid' : ''}`} {...props} />};\n\nexport default Wrapper;\n","import React from 'react';\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? '-fluid' : ''}`} {...props} />;\n}\n\nexport default Row;","import React from 'react';\n\nfunction Col(props) {\n  const size = props.size.split(' ').map(size => 'col-' + size).join(' ');\n  return <div className={size} {...props} />\n}\n\nexport default Col;","import React from \"react\";\nimport \"./style.css\";\n\nfunction CreateTable(props) {\n\n    const employeeList = () => {\n      const employees = props.employees;\n      let filteredEmployees = employees;\n  \n      // Apply filters.\n      if (props.filterPosBy !== 'none') {\n        filteredEmployees = employees.filter(employee => {\n          return employee.occupation === props.filterPosBy;\n        });\n      }\n  \n      // Apply sorting.\n      filteredEmployees.sort((first, second) => (first[props.orderBy] > second[props.orderBy]) ? 1 : -1);\n  \n      return filteredEmployees.map(employee => (\n        <tr key={employee.id}>\n          <th scope='row'>{employee.id}</th>\n          <td>{employee.name}</td>\n          <td>{employee.occupation}</td>\n          <td>{employee.salary}</td>\n        </tr>\n      ));\n    }\n  \n    return (\n      <table className={`table table-bordered table-striped employeeTable`}>\n        <thead>\n          <tr>\n            <th scope='col'>ID</th>\n            <th scope='col'>Name</th>\n            <th scope='col'>Occupation</th>\n            <th scope='col'>Salary</th>\n          </tr>\n        </thead>\n        <tbody>\n          {employeeList()}\n        </tbody>\n      </table>\n    );\n  }\n  \n  export default CreateTable;","import React from 'react';\n\nfunction SortButtons(props) {\n    return (\n        <div>\n            <button\n                className='btn btn-block actionButtons'\n                onClick={() => props.handleButtonClick(props.action, props.actionBy)}\n            >\n                {props.text}\n            </button>        \n        </div>\n    )\n};\n\nexport default SortButtons;","import React from 'react';\nimport './style.css';\n\nfunction Jumbotron(props) {\n  return <div className={`jumbotron ${props.fluid ? 'jumbotron-fluid' : ''} jumbo`} {...props}></div>;\n}\n\nexport default Jumbotron;","import React, { useState } from 'react';\nimport employees from '../employees.json';\nimport Wrapper from '../components/Wrapper';\nimport Row from '../components/Row';\nimport Col from '../components/Column';\nimport CreateTable from '../components/Table';\nimport SortButtons from '../components/Button';\nimport Jumbotron from '../components/JumboTron/index';\nimport './style.css';\n\nfunction Home() {\n  const [orderBy, setOrderBy] = useState('id');\n  const [filterPosBy, setFilterPosBy] = useState('none');\n  \n  const handleButton = (action, actionBy) => {\n    if (action !== 'order' && action !== 'filter') { return };\n\n    (action === 'order') ? setOrderBy(actionBy) : setFilterPosBy(actionBy);\n  };\n\n  const renderFilterPosButtons = () => {\n    const occupations = employees.map(employee => employee.occupation);\n    const filteredOccupations = occupations.filter((occupation, index) => occupation.indexOf(occupation) === index);\n\n    let buttons = filteredOccupations.map((occupation, index) => {\n      return (\n        <SortButtons\n          handleButtonClick={handleButton} \n          text={occupation}\n          action='filter'\n          actionBy={occupation}\n          key={index}\n        />\n      );\n    });\n\n    return buttons;\n  }\n  \n  return(\n    <div>\n      <Jumbotron>\n        <Wrapper>\n          <h1 className='text-center display-4'>Employee Directory</h1>\n        </Wrapper>\n      </Jumbotron>\n      <div className='no-jumbo'>\n        <Wrapper>\n          <Row>\n            <Col size='md-6'>\n              <h2 className='text-center heading'>Sort</h2>\n              <SortButtons handleButtonClick={handleButton} text='ID' action='order' actionBy='id'/>\n              <SortButtons handleButtonClick={handleButton} text='Name' action='order' actionBy='name'/>\n              <SortButtons handleButtonClick={handleButton} text='Occupation' action='order' actionBy='occupation' />\n              <SortButtons handleButtonClick={handleButton} text='Salary' action='order' actionBy='salary' />\n            </Col>\n            <Col size='md-6'>\n              <h2 className='text-center heading'>Filter By Occupations</h2>\n              {renderFilterPosButtons()}\n              <SortButtons handleButtonClick={handleButton} text={`No Filter`} action='filter' actionBy='none' />\n            </Col>\n          </Row>\n        </Wrapper>\n      </div>\n      <Jumbotron>\n        <Wrapper fluid='fluid'>\n          <Row>\n            <Col size='md-12'>\n              <CreateTable employees={employees} orderBy={orderBy} filterPosBy={filterPosBy} />\n            </Col>\n          </Row>\n        </Wrapper>\n      </Jumbotron>\n    </div>\n  ); \n}\n\nexport default Home;","import React from 'react';\nimport Home from './pages/Home';\nimport './App.css';\n\nfunction App() {\n    return (\n      <div>\n        <Home/>\n      </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}