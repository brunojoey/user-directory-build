{"version":3,"sources":["components/Button/index.js","components/Search/index.js","components/Table/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["SortButtons","Button","variant","href","Search","props","console","log","TextField","id","placeholder","label","type","value","search","onChange","handleChange","InputLabelProps","shrink","createTable","className","scope","name","occuapation","salary","Wrapper","children","App","state","employees","sortByName","sort","a","b","nameOne","toLowerCase","nameTwo","setState","sortByOccupation","occupationOne","occupation","occupationTwo","sortBySalary","salaryOne","salaryTwo","resetEmployees","event","target","employeeSearch","filter","employee","includes","role","this","map","Table","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8ae8fbde.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from '@material-ui/core/Button';\n\nfunction SortButtons() {\n    return (\n        <div>\n            <Button variant=\"contained\">Sort by Name</Button>\n            <Button variant=\"contained\">Sort by Occupation</Button>\n            <Button variant=\"contained\">Sort by Salary</Button>\n            <Button variant=\"contained\" href=\"#contained-buttons\">Link</Button>\n        </div>\n    )\n};\n\nexport default SortButtons","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction Search(props) {\n    console.log(\"SEARCH: \", props);\n    return (\n        <form>\n            <TextField id=\"searchEmployees\" placeholder=\"Search for Employees\" label=\"Search field\" type=\"search\" value={props.search}\n            onChange={props.handleChange} InputLabelProps={{shrink: true}} />        \n        </form>\n    )\n};\n\nexport default Search;","import React from \"react\";\nimport \"./style.css\";\n\nfunction createTable(props) {\n    return (\n        <div className=\"employee-table\">\n            <table>\n                <thead>\n                    <tr>\n                        <th scope=\"col\">ID</th>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Occupation</th>\n                        <th scope=\"col\">Salary</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <th scope=\"row\">{props.id}</th>\n                        <td>{props.name}</td>\n                        <td>{props.occuapation}</td>\n                        <td>{props.salary}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    )\n};\n\nexport default createTable","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper text-center\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport SortButtons from \"./components/Button\";\nimport Search from \"./components/Search\";\nimport Table from \"./components/Table\";\nimport Wrapper from \"./components/Wrapper\";\nimport employees from \"./employees.json\";\n\nclass App extends React.Component {\n  state = {\n    employees,\n    search: \"\"\n  };\n\n  sortByName = () => {\n    const sortByName = this.state.employees.sort(function(a, b) {\n      let nameOne = a.name.toLowerCase();\n      let nameTwo = b.name.toLowerCase();\n      if (nameOne < nameTwo)\n        return -1\n      if (nameOne > nameTwo)\n        return 1\n      return 0\n    });\n    this.setState(sortByName);\n  };\n\n  sortByOccupation = () => {\n    const sortByOccupation = this.state.employees.sort(function(a, b) {\n      let occupationOne = a.occupation.toLowerCase();\n      let occupationTwo = b.occupation.toLowerCase();\n      if (occupationOne < occupationTwo)\n        return -1\n      if (occupationOne > occupationTwo)\n        return 1\n      return 0\n    });\n    this.setState(sortByOccupation); \n  };\n\n  sortBySalary = () => {\n    const sortBySalary = this.state.employees.sort(function(a, b) {\n      let salaryOne = a.salary.toLowerCase();\n      let salaryTwo = b.salary.toLowerCase();\n      if (salaryOne < salaryTwo)\n        return -1\n      if (salaryOne > salaryTwo)\n        return 1\n      return 0\n    });\n    this.setState(sortBySalary);\n  };\n\n  resetEmployees = () => {\n    this.setState({employees});\n    this.setState({search: \"\"});\n  };\n\n  handleChange = (event) => {\n    this.setState({search: event.target.value});\n    const employeeSearch = this.state.employees.filter(employee => employee.name.includes(this.state.search)\n    || employee.role.includes(this.state.search));\n    this.setState({employees: employeeSearch});\n    if (event.target.value === '') {\n      this.setState({employees});\n    }\n  };\n\n  render() {\n    return (\n      <div>\n      <Wrapper>\n        <h1>Company Employee Directory</h1>\n        <Search handleChange={this.handleChange} search={this.state.search}/>\n        <SortButtons />\n        {this.state.employees.map(employee => (\n        <Table sortByName={this.sortByName} \n            sortByOccupation={this.sortByOccupation} \n            sortBySalary={this.sortBySalary} \n            resetEmployees={this.resetEmployees}\n            id={employee.id}\n            key={employee.id}\n            name={employee.name}\n            occupation={employee.occupation}\n            salary={employee.salary}\n        />\n        ))};\n      </Wrapper>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}